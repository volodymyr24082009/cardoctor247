const express = require("express");
const fs = require("fs").promises;
const path = require("path");
const bodyParser = require("body-parser");
const nodemailer = require("nodemailer");
const geoip = require("geoip-lite");
const fileUpload = require("express-fileupload");
const cors = require("cors");

// –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É fetch –¥–ª—è Node.js –≤–µ—Ä—Å—ñ–π < 18
if (!global.fetch) {
  global.fetch = require("node-fetch");
}

require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3001;

// –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ –¥–∞–Ω–∏—Ö
const DATA_DIR = path.join(__dirname, "data");
const APPLICATION_FILE = path.join(DATA_DIR, "application.json");
const MASTERS_FILE = path.join(DATA_DIR, "masters.json");
const USERS_FILE = path.join(DATA_DIR, "users.json");
const ANALYTICS_FILE = path.join(DATA_DIR, "analytics.json");

// –ö–µ—à –¥–ª—è –∫—É—Ä—Å—É –≤–∞–ª—é—Ç
let exchangeRateCache = {
  rate: 37, // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  lastUpdated: null,
  ttl: 3600000, // 1 –≥–æ–¥–∏–Ω–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
};

// ================================
// MIDDLEWARE CONFIGURATION
// ================================

app.use(cors());
app.use(bodyParser.json({ limit: "10mb" }));
app.use(bodyParser.urlencoded({ limit: "10mb", extended: true }));

app.use(
  fileUpload({
    limits: { fileSize: 5 * 1024 * 1024 }, // 5MB max file size
    createParentPath: true,
  })
);

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use(express.static(path.join(__dirname)));
app.use("/auth", express.static(path.join(__dirname, "auth")));
app.use("/public", express.static(path.join(__dirname, "public")));
app.use("/profile", express.static(path.join(__dirname, "profile")));

// ================================
// UTILITY FUNCTIONS
// ================================

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–∞–Ω–∏—Ö
async function ensureDataDir() {
  try {
    await fs.mkdir(DATA_DIR, { recursive: true });
    console.log("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞");
  } catch (err) {
    if (err.code !== "EEXIST") throw err;
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è JSON —Ñ–∞–π–ª—ñ–≤
async function initializeFile(fileName) {
  try {
    await fs.access(fileName);
    console.log(`‚úÖ –§–∞–π–ª ${path.basename(fileName)} —ñ—Å–Ω—É—î`);
  } catch {
    await fs.writeFile(fileName, "[]", "utf8");
    console.log(`üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª ${path.basename(fileName)}`);
  }
}

// –ß–∏—Ç–∞–Ω–Ω—è JSON —Ñ–∞–π–ª—É
async function readJsonFile(fileName) {
  try {
    const data = await fs.readFile(fileName, "utf8");
    return JSON.parse(data || "[]");
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É ${fileName}:`, error);
    return [];
  }
}

// –ó–∞–ø–∏—Å JSON —Ñ–∞–π–ª—É
async function writeJsonFile(fileName, data) {
  try {
    await fs.writeFile(fileName, JSON.stringify(data, null, 2), "utf8");
    console.log(`üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ ${path.basename(fileName)}`);
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —Ñ–∞–π–ª—É ${fileName}:`, error);
    throw error;
  }
}

// –ü–µ—Ä–µ–∫–ª–∞–¥ —Ä–∞–π–æ–Ω—ñ–≤
function translateDistrict(district) {
  const districts = {
    korolyovsky: "–ö–æ—Ä–æ–ª—å–æ–≤—Å—å–∫–∏–π(–ñ–∏—Ç–æ–º–∏—Ä)",
    bogunsky: "–ë–æ–≥—É–Ω—Å—å–∫–∏–π(–ñ–∏—Ç–æ–º–∏—Ä)",
  };
  return districts[district.toLowerCase()] || district;
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
async function saveAnalytics(data) {
  try {
    const analytics = await readJsonFile(ANALYTICS_FILE);
    analytics.push({
      ...data,
      timestamp: new Date().toISOString(),
    });
    await writeJsonFile(ANALYTICS_FILE, analytics);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö:", error);
  }
}

// ================================
// EMAIL FUNCTIONALITY
// ================================

async function sendEmailNotification(applicationData) {
  if (!process.env.EMAIL_PASSWORD) {
    console.warn("‚ö†Ô∏è EMAIL_PASSWORD –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, email –Ω–µ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ");
    return false;
  }

  try {
    let transporter = nodemailer.createTransporter({
      service: "gmail",
      auth: {
        user: "autolikar24.7@gmail.com",
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    let mailOptions = {
      from: applicationData.email || "autolikar24.7@gmail.com",
      to: "autolikar24.7@gmail.com",
      subject: "–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞",
      text: `
        –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤—É –∑–∞—è–≤–∫—É:
        –Ü–º'—è: ${applicationData.name || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
        Email: ${applicationData.email || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
        –¢–µ–ª–µ—Ñ–æ–Ω: ${applicationData.phone || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
        –ü—Ä–æ–±–ª–µ–º–∞: ${applicationData.problem || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
        –†–∞–π–æ–Ω: ${applicationData.district || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
        –í—É–ª–∏—Ü—è: ${applicationData.street || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
      `,
    };

    await transporter.sendMail(mailOptions);
    console.log("üìß –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ");
    return true;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
    return false;
  }
}

// ================================
// EXCHANGE RATE FUNCTIONALITY
// ================================

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –∑ API –ù–ë–£
async function fetchExchangeRateFromNBU() {
  try {
    // –§–æ—Ä–º—É—î–º–æ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ YYYYMMDD
    const today = new Date();
    const dateString =
      today.getFullYear() +
      String(today.getMonth() + 1).padStart(2, "0") +
      String(today.getDate()).padStart(2, "0");

    const apiUrl = `https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?valcode=USD&date=${dateString}&json`;

    console.log(`üîÑ –ó–∞–ø–∏—Ç –¥–æ –ù–ë–£ API: ${apiUrl}`);

    const response = await fetch(apiUrl);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    if (data && data.length > 0 && data[0].rate) {
      const rate = parseFloat(data[0].rate);
      console.log(`üí∞ –û—Ç—Ä–∏–º–∞–Ω–æ –∫—É—Ä—Å USD: ${rate} UAH`);
      return rate;
    } else {
      throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ API –ù–ë–£");
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –∑ –ù–ë–£:", error.message);

    // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ, —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞ –≤—á–æ—Ä–∞
    try {
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      const yesterdayString =
        yesterday.getFullYear() +
        String(yesterday.getMonth() + 1).padStart(2, "0") +
        String(yesterday.getDate()).padStart(2, "0");

      const fallbackUrl = `https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?valcode=USD&date=${yesterdayString}&json`;
      console.log(`üîÑ –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –∑–∞ –≤—á–æ—Ä–∞: ${fallbackUrl}`);

      const fallbackResponse = await fetch(fallbackUrl);
      const fallbackData = await fallbackResponse.json();

      if (fallbackData && fallbackData.length > 0 && fallbackData[0].rate) {
        const rate = parseFloat(fallbackData[0].rate);
        console.log(`üí∞ –û—Ç—Ä–∏–º–∞–Ω–æ –∫—É—Ä—Å USD –∑–∞ –≤—á–æ—Ä–∞: ${rate} UAH`);
        return rate;
      }
    } catch (fallbackError) {
      console.error(
        "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –∑–∞ –≤—á–æ—Ä–∞:",
        fallbackError.message
      );
    }

    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –∑ –∫–µ—à–µ–º
async function getExchangeRate() {
  const now = Date.now();

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–µ—à
  if (
    !exchangeRateCache.lastUpdated ||
    now - exchangeRateCache.lastUpdated > exchangeRateCache.ttl
  ) {
    try {
      const newRate = await fetchExchangeRateFromNBU();
      exchangeRateCache = {
        rate: newRate,
        lastUpdated: now,
        ttl: 3600000, // 1 –≥–æ–¥–∏–Ω–∞
      };
      console.log("üîÑ –ö–µ—à –∫—É—Ä—Å—É –≤–∞–ª—é—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ");
    } catch (error) {
      console.log("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –∫—É—Ä—Å –∑ –∫–µ—à—É");
    }
  }

  return exchangeRateCache.rate;
}

// ================================
// ROUTES - STATIC PAGES
// ================================

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "CalculatingClearance.html"));
});

app.get("/auth", (req, res) => {
  res.sendFile(path.join(__dirname, "auth", "index.html"));
});

app.get("/public", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

app.get("/profile/:id", (req, res) => {
  res.sendFile(path.join(__dirname, "profile", "profile.html"));
});

app.get("/profile/*", (req, res) => {
  res.sendFile(path.join(__dirname, "profile", "profile.html"));
});

app.get("/masters.json", (req, res) => {
  res.sendFile(path.join(DATA_DIR, "masters.json"));
});

// ================================
// API ROUTES - EXCHANGE RATE
// ================================

// API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –≤–∞–ª—é—Ç
app.get("/api/exchange-rate", async (req, res) => {
  try {
    const rate = await getExchangeRate();

    res.json({
      success: true,
      rate: rate,
      lastUpdated: new Date(exchangeRateCache.lastUpdated).toISOString(),
      source: "–ù–ë–£",
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ API –∫—É—Ä—Å—É –≤–∞–ª—é—Ç:", error);

    res.status(500).json({
      success: false,
      message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –≤–∞–ª—é—Ç",
      rate: exchangeRateCache.rate, // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π –∫—É—Ä—Å
      error: error.message,
    });
  }
});

// API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä
app.get("/api/status", (req, res) => {
  res.json({
    status: "OK",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    exchangeRate: {
      current: exchangeRateCache.rate,
      lastUpdated: exchangeRateCache.lastUpdated
        ? new Date(exchangeRateCache.lastUpdated).toISOString()
        : null,
    },
  });
});

// ================================
// API ROUTES - USER MANAGEMENT
// ================================

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
app.post("/register", async (req, res) => {
  const userData = req.body;
  console.log("üìù –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userData);

  if (!userData.email || !userData.password) {
    return res.status(400).json({
      message: "Email —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è.",
    });
  }

  if (userData.district) {
    userData.district = translateDistrict(userData.district);
  }

  const fileName = userData.type === "master" ? MASTERS_FILE : USERS_FILE;

  try {
    const users = await readJsonFile(fileName);

    const existingUser = users.find((user) => user.email === userData.email);
    if (existingUser) {
      return res.status(400).json({
        message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.",
      });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const newUser = {
      id: Date.now().toString(),
      fullname: userData.fullname || "",
      email: userData.email,
      password: userData.password,
      phone: userData.phone || "",
      district: userData.district || "",
      nickname: userData.nickname || "",
      type: userData.type,
      services:
        userData.type === "master" && Array.isArray(userData.services)
          ? userData.services
          : [],
      createdAt: new Date().toISOString(),
    };

    console.log("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ—Å–ª—É–≥–∞–º–∏:", newUser.services);

    users.push(newUser);
    await writeJsonFile(fileName, users);

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    const analytics = {
      method: "POST",
      url: "/register",
      ip: req.ip,
      userAgent: req.get("User-Agent"),
      realIp: req.headers["x-forwarded-for"] || req.connection.remoteAddress,
    };

    const geo = geoip.lookup(analytics.realIp);
    if (geo) {
      analytics.location = `${geo.city}, ${geo.country}`;
    }

    await saveAnalytics(analytics);

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è
    const { password, ...userWithoutPassword } = newUser;
    res.status(200).json({
      message: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!",
      user: userWithoutPassword,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
    res.status(500).json({
      message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
      error: error.message,
    });
  }
});

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.put("/api/user/:id", async (req, res) => {
  const { id } = req.params;
  const userData = req.body;

  try {
    const users = await readJsonFile(USERS_FILE);
    const masters = await readJsonFile(MASTERS_FILE);

    const userIndex = users.findIndex((u) => u.id === id);
    const masterIndex = masters.findIndex((m) => m.id === id);

    let fileToUpdate;
    let indexToUpdate;

    if (userData.type === "master") {
      fileToUpdate = MASTERS_FILE;
      indexToUpdate = masterIndex;
      if (userIndex !== -1) {
        users.splice(userIndex, 1);
        await writeJsonFile(USERS_FILE, users);
      }
    } else {
      fileToUpdate = USERS_FILE;
      indexToUpdate = userIndex;
      if (masterIndex !== -1) {
        masters.splice(masterIndex, 1);
        await writeJsonFile(MASTERS_FILE, masters);
      }
    }

    const dataToUpdate = userData.type === "master" ? masters : users;
    if (indexToUpdate === -1) {
      userData.id = id;
      userData.updatedAt = new Date().toISOString();
      dataToUpdate.push(userData);
    } else {
      dataToUpdate[indexToUpdate] = {
        ...dataToUpdate[indexToUpdate],
        ...userData,
        updatedAt: new Date().toISOString(),
      };
    }

    await writeJsonFile(fileToUpdate, dataToUpdate);

    res.status(200).json({
      message: "–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
      user: userData,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é" });
  }
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞
app.post("/api/user/:id/avatar", async (req, res) => {
  const { id } = req.params;

  if (!req.files || !req.files.avatar) {
    return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" });
  }

  try {
    const avatar = req.files.avatar;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—É —Ñ–∞–π–ª—É
    const allowedTypes = ["image/jpeg", "image/png", "image/gif"];
    if (!allowedTypes.includes(avatar.mimetype)) {
      return res.status(400).json({
        error: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É. –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç–∏–ø–∏: JPEG, PNG, GIF",
      });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É (5MB)
    if (avatar.size > 5 * 1024 * 1024) {
      return res.status(400).json({
        error: "–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 5MB",
      });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
    const fileName = `${id}-${Date.now()}${path.extname(avatar.name)}`;
    const avatarsDir = path.join(__dirname, "public", "avatars");
    const uploadPath = path.join(avatarsDir, fileName);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä—ñ–≤
    await fs.mkdir(avatarsDir, { recursive: true });

    // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ–∞–π–ª
    await avatar.mv(uploadPath);

    // –û–Ω–æ–≤–ª—é—î–º–æ URL –∞–≤–∞—Ç–∞—Ä–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    const avatarUrl = `/public/avatars/${fileName}`;

    const users = await readJsonFile(USERS_FILE);
    const masters = await readJsonFile(MASTERS_FILE);

    let updated = false;

    // –û–Ω–æ–≤–ª—é—î–º–æ –≤ —Ñ–∞–π–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const userIndex = users.findIndex((u) => u.id === id);
    if (userIndex !== -1) {
      users[userIndex].avatarUrl = avatarUrl;
      users[userIndex].updatedAt = new Date().toISOString();
      await writeJsonFile(USERS_FILE, users);
      updated = true;
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –≤ —Ñ–∞–π–ª—ñ –º–∞–π—Å—Ç—Ä—ñ–≤
    const masterIndex = masters.findIndex((m) => m.id === id);
    if (masterIndex !== -1) {
      masters[masterIndex].avatarUrl = avatarUrl;
      masters[masterIndex].updatedAt = new Date().toISOString();
      await writeJsonFile(MASTERS_FILE, masters);
      updated = true;
    }

    if (!updated) {
      await fs.unlink(uploadPath);
      return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    res.status(200).json({ avatarUrl });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–≤–∞—Ç–∞—Ä–∞:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–≤–∞—Ç–∞—Ä–∞" });
  }
});

// ================================
// API ROUTES - APPLICATIONS
// ================================

// –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏
app.post("/api/submit-request", async (req, res) => {
  const applicationData = {
    ...req.body,
    id: Date.now().toString(),
    createdAt: new Date().toISOString(),
    completed: undefined,
  };

  try {
    const applications = await readJsonFile(APPLICATION_FILE);
    applications.push(applicationData);
    await writeJsonFile(APPLICATION_FILE, applications);

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const emailSent = await sendEmailNotification(applicationData);

    if (emailSent) {
      res.status(200).json({ message: "–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞" });
    } else {
      res.status(200).json({
        message:
          "–ó–∞—è–≤–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
      });
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞—è–≤–∫–∏:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞—è–≤–∫–∏" });
  }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞—è–≤–æ–∫
app.get("/api/applications", async (req, res) => {
  try {
    const applications = await readJsonFile(APPLICATION_FILE);
    res.status(200).json(applications);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞—è–≤–æ–∫:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞—è–≤–æ–∫" });
  }
});

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏
app.put("/api/update-application/:id", async (req, res) => {
  const { id } = req.params;
  const { completed } = req.body;

  try {
    const applications = await readJsonFile(APPLICATION_FILE);
    const applicationIndex = applications.findIndex((app) => app.id === id);

    if (applicationIndex === -1) {
      return res.status(404).json({ error: "–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    applications[applicationIndex].completed = completed;
    applications[applicationIndex].updatedAt = new Date().toISOString();
    await writeJsonFile(APPLICATION_FILE, applications);

    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ" });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏:", error);
    res
      .status(500)
      .json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏" });
  }
});

// ================================
// API ROUTES - DATA RETRIEVAL
// ================================

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–∞–π—Å—Ç—Ä—ñ–≤
app.get("/api/masters", async (req, res) => {
  try {
    const [masters, applications] = await Promise.all([
      readJsonFile(MASTERS_FILE),
      readJsonFile(APPLICATION_FILE),
    ]);

    const mastersWithStats = masters.map((master) => {
      const masterApplications = applications.filter(
        (app) => app.masterId === master.id
      );
      return {
        ...master,
        successfulServices: masterApplications.filter(
          (app) => app.completed === true
        ).length,
        unsuccessfulServices: masterApplications.filter(
          (app) => app.completed === false
        ).length,
        pendingServices: masterApplications.filter(
          (app) => app.completed === undefined
        ).length,
        totalServices: masterApplications.length,
      };
    });

    res.status(200).json(mastersWithStats);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –º–∞–π—Å—Ç—Ä—ñ–≤:", error);
    res
      .status(500)
      .json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –º–∞–π—Å—Ç—Ä—ñ–≤" });
  }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
app.get("/api/users", async (req, res) => {
  try {
    const users = await readJsonFile(USERS_FILE);
    res.status(200).json(users);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", error);
    res
      .status(500)
      .json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" });
  }
});

// ================================
// API ROUTES - ANALYTICS
// ================================

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
app.post("/api/save-analytics", async (req, res) => {
  const analyticsData = req.body;

  try {
    await saveAnalytics(analyticsData);
    res.status(200).json({ message: "–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ" });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö:", error);
    res
      .status(500)
      .json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö" });
  }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
app.get("/api/analytics", async (req, res) => {
  try {
    const [users, masters, applications] = await Promise.all([
      readJsonFile(USERS_FILE),
      readJsonFile(MASTERS_FILE),
      readJsonFile(APPLICATION_FILE),
    ]);

    const analytics = {
      totalUsers: users.length,
      totalMasters: masters.length,
      successfulServices: applications.filter((app) => app.completed === true)
        .length,
      unsuccessfulServices: applications.filter(
        (app) => app.completed === false
      ).length,
      totalApplications: applications.length,
      pendingApplications: applications.filter(
        (app) => app.completed === undefined
      ).length,
      districtStats: masters.reduce((acc, master) => {
        if (master.district) {
          acc[master.district] = (acc[master.district] || 0) + 1;
        }
        return acc;
      }, {}),
    };

    res.status(200).json(analytics);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏" });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª—É–≥
app.get("/api/services-stats", async (req, res) => {
  try {
    const applications = await readJsonFile(APPLICATION_FILE);

    const stats = {
      byMonth: {},
      byService: {},
      byDistrict: {},
    };

    applications.forEach((app) => {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—è—Ü—è—Ö
      const month = new Date(app.createdAt).toLocaleString("uk-UA", {
        month: "long",
        year: "numeric",
      });
      stats.byMonth[month] = (stats.byMonth[month] || 0) + 1;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö –ø–æ—Å–ª—É–≥
      if (app.serviceType) {
        stats.byService[app.serviceType] =
          (stats.byService[app.serviceType] || 0) + 1;
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–π–æ–Ω–∞—Ö
      if (app.district) {
        stats.byDistrict[app.district] =
          (stats.byDistrict[app.district] || 0) + 1;
      }
    });

    res.status(200).json(stats);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª—É–≥:", error);
    res
      .status(500)
      .json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª—É–≥" });
  }
});

// ================================
// ERROR HANDLING
// ================================

// –û–±—Ä–æ–±–∫–∞ 404
app.use((req, res) => {
  res.status(404).json({
    error: "–°—Ç–æ—Ä—ñ–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
    path: req.path,
  });
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
app.use((error, req, res, next) => {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
  res.status(500).json({
    error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    message: error.message,
  });
});

// ================================
// SERVER INITIALIZATION
// ================================

async function startServer() {
  try {
    console.log("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤–µ—Ä–∞...");

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Ç–∞ —Ñ–∞–π–ª–∏
    await ensureDataDir();
    await Promise.all(
      [APPLICATION_FILE, MASTERS_FILE, USERS_FILE, ANALYTICS_FILE].map(
        initializeFile
      )
    );

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫—É—Ä—Å –≤–∞–ª—é—Ç
    try {
      const rate = await getExchangeRate();
      console.log(`üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å USD: ${rate} UAH`);
    } catch (error) {
      console.log(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫—É—Ä—Å—É: ${error.message}`);
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üì± –í—ñ–¥–∫—Ä–∏–π—Ç–µ http://localhost:${PORT} —É –±—Ä–∞—É–∑–µ—Ä—ñ`);
      console.log(`üìä API –¥–æ—Å—Ç—É–ø–Ω–µ –∑–∞ –∞–¥—Ä–µ—Å–æ—é http://localhost:${PORT}/api/`);
    });
  } catch (error) {
    console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä:", error);
    process.exit(1);
  }
}

// ================================
// GRACEFUL SHUTDOWN
// ================================

process.on("SIGTERM", () => {
  console.log("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...");
  process.exit(0);
});

process.on("SIGINT", () => {
  console.log("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...");
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();

module.exports = app;
